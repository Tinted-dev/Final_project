"""Initial database setup

Revision ID: 79d2b3229987
Revises: 
Create Date: 2025-05-22 14:28:37.083512

"""
from alembic import op
import sqlalchemy as sa


# revision identifiers, used by Alembic.
revision = '79d2b3229987'
down_revision = None
branch_labels = None
depends_on = None


def upgrade():
    # ### commands auto generated by Alembic - please adjust! ###

    # 1. Create tables that are independent or only depend on 'regions'/'services'
    op.create_table('regions',
        sa.Column('id', sa.Integer(), nullable=False),
        sa.Column('name', sa.String(length=100), nullable=False),
        sa.Column('description', sa.Text(), nullable=True),
        sa.PrimaryKeyConstraint('id'),
        sa.UniqueConstraint('name')
    )
    op.create_table('services',
        sa.Column('id', sa.Integer(), nullable=False),
        sa.Column('name', sa.String(length=100), nullable=False),
        sa.Column('description', sa.Text(), nullable=True),
        sa.PrimaryKeyConstraint('id'),
        sa.UniqueConstraint('name', name='_service_name_uc')
    )

    # 2. Create 'companies' and 'users' tables *without* their mutually dependent foreign keys initially.
    #    The columns for the foreign keys (e.g., company_id, user_id) should still exist.
    op.create_table('companies',
        sa.Column('id', sa.Integer(), nullable=False),
        sa.Column('name', sa.String(length=150), nullable=False),
        sa.Column('email', sa.String(length=120), nullable=False),
        sa.Column('phone', sa.String(length=20), nullable=False),
        sa.Column('status', sa.String(length=50), nullable=False),
        sa.Column('description', sa.Text(), nullable=True),
        sa.Column('created_at', sa.DateTime(), nullable=True),
        sa.Column('user_id', sa.Integer(), nullable=True), # Keep the column
        sa.Column('region_id', sa.Integer(), nullable=True), # Keep the column
        sa.PrimaryKeyConstraint('id'),
        sa.UniqueConstraint('email'),
        sa.UniqueConstraint('name', name='_company_name_uc'),
        sa.ForeignKeyConstraint(['region_id'], ['regions.id'], ondelete='SET NULL') # 'regions' is already created
        # REMOVED: sa.ForeignKeyConstraint(['user_id'], ['users.id'], ondelete='SET NULL') - will add later
    )

    op.create_table('users',
        sa.Column('id', sa.Integer(), nullable=False),
        sa.Column('username', sa.String(length=100), nullable=False),
        sa.Column('email', sa.String(length=100), nullable=False),
        sa.Column('password_hash', sa.String(length=200), nullable=False),
        sa.Column('role', sa.String(length=20), nullable=False),
        sa.Column('company_id', sa.Integer(), nullable=True), # Keep the column
        sa.PrimaryKeyConstraint('id'),
        sa.UniqueConstraint('company_id', name='_user_company_id_uc'),
        sa.UniqueConstraint('email'),
        sa.UniqueConstraint('username')
        # REMOVED: sa.ForeignKeyConstraint(['company_id'], ['companies.id'], ondelete='SET NULL') - will add later
    )

    # 3. Add the mutually dependent foreign keys AFTER both 'companies' and 'users' tables exist.
    op.create_foreign_key(
        'fk_users_company_id', # Name of the foreign key constraint
        'users', 'companies',  # Source table, target table
        ['company_id'], ['id'], # Source column(s), target column(s)
        ondelete='SET NULL'
    )
    # Assuming 'companies' also has a foreign key to 'users' via 'user_id'
    op.create_foreign_key(
        'fk_companies_user_id', # Name of the foreign key constraint
        'companies', 'users',  # Source table, target table
        ['user_id'], ['id'],   # Source column(s), target column(s)
        ondelete='SET NULL'
    )


    # 4. Create association and other dependent tables.
    #    These now refer to 'companies', 'services', 'regions' which are already guaranteed to exist.
    op.create_table('company_service_association',
        sa.Column('company_id', sa.Integer(), nullable=False),
        sa.Column('service_id', sa.Integer(), nullable=False),
        sa.ForeignKeyConstraint(['company_id'], ['companies.id'], ondelete='CASCADE'),
        sa.ForeignKeyConstraint(['service_id'], ['services.id'], ondelete='CASCADE'),
        sa.PrimaryKeyConstraint('company_id', 'service_id')
    )
    op.create_table('locations',
        sa.Column('id', sa.Integer(), nullable=False),
        sa.Column('name', sa.String(length=100), nullable=False),
        sa.Column('region_id', sa.Integer(), nullable=False),
        sa.Column('company_id', sa.Integer(), nullable=True), # Assuming locations also has company_id
        sa.ForeignKeyConstraint(['region_id'], ['regions.id'], ondelete='CASCADE'),
        sa.ForeignKeyConstraint(['company_id'], ['companies.id'], ondelete='CASCADE'),
        sa.PrimaryKeyConstraint('id')
    )
    # ### end Alembic commands ###


def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_table('locations')
    op.drop_table('company_service_association')

    # Drop the foreign keys first in reverse order of creation
    op.drop_constraint('fk_companies_user_id', 'companies', type_='foreignkey')
    op.drop_constraint('fk_users_company_id', 'users', type_='foreignkey')

    op.drop_table('users')
    op.drop_table('companies')
    op.drop_table('services')
    op.drop_table('regions')
    # ### end Alembic commands ###